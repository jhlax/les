# uncompyle6 version 3.4.1
# Python bytecode 2.7 (62211)
# Decompiled from: Python 2.7.16 (v2.7.16:413a49145e, Mar  2 2019, 14:32:10) 
# [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)]
# Embedded file name: /Users/versonator/Jenkins/live/output/mac_64_static/Release/python-bundle/MIDI Remote Scripts/Push/special_physical_display.py
# Compiled at: 2019-04-09 19:23:44
from __future__ import absolute_import, print_function, unicode_literals
from ableton.v2.base import group, flatten
from ableton.v2.control_surface.elements import PhysicalDisplayElement
DISPLAY_BLOCK_LENGTH = 18

class SpecialPhysicalDisplay(PhysicalDisplayElement):
    u"""
    Special physical display subclass that handles custom and special characters
    """
    ascii_translations = {'\x00': 0, 
       '\x01': 1, 
       '\x02': 2, 
       '\x03': 3, 
       '\x04': 4, 
       '\x05': 5, 
       '\x06': 6, 
       '\x07': 7, 
       u'\xa6': 8, 
       u'\xb0': 9, 
       u'\xc4': 10, 
       u'\xc7': 11, 
       u'\xd6': 12, 
       u'\xdc': 13, 
       u'\xdf': 14, 
       u'\xe0': 15, 
       u'\xe4': 16, 
       u'\xe7': 17, 
       u'\xe8': 18, 
       u'\xe9': 19, 
       u'\xea': 20, 
       u'\xee': 21, 
       u'\xf1': 22, 
       u'\xf6': 23, 
       u'\xf7': 24, 
       u'\xf8': 25, 
       u'\xfc': 26, 
       u'\u266d': 27, 
       '\x1b': 27, 
       '\x1c': 28, 
       '\x1d': 29, 
       '\x1e': 30, 
       '\x1f': 31, 
       ' ': 32, 
       '!': 33, 
       '"': 34, 
       '#': 35, 
       '$': 36, 
       '%': 37, 
       '&': 38, 
       "'": 39, 
       '(': 40, 
       ')': 41, 
       '*': 42, 
       '+': 43, 
       ',': 44, 
       '-': 45, 
       '.': 46, 
       '/': 47, 
       '0': 48, 
       '1': 49, 
       '2': 50, 
       '3': 51, 
       '4': 52, 
       '5': 53, 
       '6': 54, 
       '7': 55, 
       '8': 56, 
       '9': 57, 
       ':': 58, 
       ';': 59, 
       '<': 60, 
       '=': 61, 
       '>': 62, 
       '?': 63, 
       '@': 64, 
       'A': 65, 
       'B': 66, 
       'C': 67, 
       'D': 68, 
       'E': 69, 
       'F': 70, 
       'G': 71, 
       'H': 72, 
       'I': 73, 
       'J': 74, 
       'K': 75, 
       'L': 76, 
       'M': 77, 
       'N': 78, 
       'O': 79, 
       'P': 80, 
       'Q': 81, 
       'R': 82, 
       'S': 83, 
       'T': 84, 
       'U': 85, 
       'V': 86, 
       'W': 87, 
       'X': 88, 
       'Y': 89, 
       'Z': 90, 
       '[': 91, 
       '\\': 92, 
       ']': 93, 
       '^': 94, 
       '_': 95, 
       '`': 96, 
       'a': 97, 
       'b': 98, 
       'c': 99, 
       'd': 100, 
       'e': 101, 
       'f': 102, 
       'g': 103, 
       'h': 104, 
       'i': 105, 
       'j': 106, 
       'k': 107, 
       'l': 108, 
       'm': 109, 
       'n': 110, 
       'o': 111, 
       'p': 112, 
       'q': 113, 
       'r': 114, 
       's': 115, 
       't': 116, 
       'u': 117, 
       'v': 118, 
       'w': 119, 
       'x': 120, 
       'y': 121, 
       'z': 122, 
       '{': 125, 
       '|': 124, 
       '}': 125, 
       '~': 126, 
       '\x7f': 127}

    def set_num_segments(self, num_segments):
        super(SpecialPhysicalDisplay, self).set_num_segments(num_segments)
        for segment in self._logical_segments:
            segment.separator = ' '

    def _build_inner_message(self, message):
        message = super(SpecialPhysicalDisplay, self)._build_inner_message(message)
        return flatten([ g[:-1] for g in group(message, DISPLAY_BLOCK_LENGTH) ])